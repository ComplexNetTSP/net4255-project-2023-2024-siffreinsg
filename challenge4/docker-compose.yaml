version: '3'
services:
  flask_db:
    build:
      context: app_db
      dockerfile: Dockerfile
    container_name: flask_db
    image: siffreinsg/net4255_challenge4_db:latest
    environment:
      APP_ENV: "prod"
      APP_DEBUG: "false"
      APP_PORT: 5000
      MONGODB_DATABASE: flaskdb
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: pass
      MONGODB_HOSTNAME: mongodb
      MONGODB_PORT: 27017
    ports:
      - "5000:5000"
    volumes:
      - appdbdata:/app
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  flask_nodb:
    build:
      context: app_nodb
      dockerfile: Dockerfile
    container_name: flask_nodb
    image: siffreinsg/net4255_challenge4_nodb:latest
    environment:
      APP_ENV: "prod"
      APP_DEBUG: "false"
      APP_PORT: 5001
    ports:
      - "5001:5001"
    volumes:
      - appdata:/app
    networks:
      - frontend
      - backend

  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongodb
    command: mongod
    environment:
      MONGODB_INITDB_ROOT_USERNAME: root
      MONGODB_INITDB_ROOT_PASSWORD: pass
      MONGODB_INITDB_DATABASE: flaskdb
      MONGODB_DATA_DIR: /data/db
      MONGODB_LOG_DIR: /dev/null
    volumes:
      - dbdata:/data/db
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: siffreinsg/net4255_c4_webserver:latest
    container_name: webserver
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "false"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask_db
      - flask_nodb
    networks:
      - frontend


networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  dbdata:
    driver: local
  appdbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local
